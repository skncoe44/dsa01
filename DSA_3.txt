•	Consider a student database of SEIT class (at least 15 records). Database contains different fields of every student like Roll No, Name and SGPA.(Array of structure)
a) Design a roll call list, Arrange list of students to find out first ten toppers from a class. (Use Quick
sort)
b) Search a particular student according to Roll No. using Binary search


#include <iostream>
#include <string>

// Structure to represent a student
struct Student {
    int rollNo;
    std::string name;
    double sgpa;
};

// Function to swap two students
void swap(Student& a, Student& b) {
    Student temp = a;
    a = b;
    b = temp;
}

// Function to partition the array for quicksort
int partition(Student arr[], int low, int high) {
    double pivot = arr[high].sgpa;
    int i = low - 1;

    for (int j = low; j < high; ++j) {
        if (arr[j].sgpa >= pivot) {
            ++i;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Quicksort function
void quicksort(Student arr[], int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);

        quicksort(arr, low, pivotIndex - 1);
        quicksort(arr, pivotIndex + 1, high);
    }
}

// Function to perform binary search on the student array based on Roll No.
int binarySearch(const Student arr[], int size, int rollNo) {
    int low = 0, high = size - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid].rollNo == rollNo)
            return mid;
        else if (arr[mid].rollNo < rollNo)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return -1; // Return -1 if the student with the given Roll No. is not found
}

// Function to display the first ten toppers
void displayTopTen(const Student arr[], int size) {
    std::cout << "Top Ten Toppers:\n";
    for (int i = 0; i < 10 && i < size; ++i) {
        if (arr[i].rollNo != 0)
            std::cout << "Roll No: " << arr[i].rollNo << ", Name: " << arr[i].name << ", SGPA: " << arr[i].sgpa << "\n";
    }
}

int main() {
    const int numStudents = 15;
    Student studentDatabase[numStudents] = {
        {101, "John", 9.5},
        {102, "Alice", 8.7},
        {103, "Bob", 8.2},
        {104, "Catherine", 9.0},
        {105, "David", 7.8},
        {106, "Eva", 8.9},
        {107, "Frank", 7.5},
        {108, "Grace", 9.2},
        {109, "Henry", 8.1},
        {110, "Ivy", 8.5},
        {111, "Jack", 9.3},
        {112, "Katie", 7.7},
        {113, "Leo", 8.4},
        {114, "Mia", 9.1},
        {115, "Nathan", 8.6}
        // Add more student records here
    };

    // Sort the student database using quicksort
    quicksort(studentDatabase, 0, numStudents - 1);

    // Display the first ten toppers
    displayTopTen(studentDatabase, numStudents);

    // Take Roll No. as input from the user
    int searchRollNo;
    std::cout << "Enter the Roll No. to search: ";
    std::cin >> searchRollNo;

    // Search for a student using binary search based on Roll No.
    int searchResult = binarySearch(studentDatabase, numStudents, searchRollNo);

    if (searchResult != -1) {
        std::cout << "Student found - Roll No: " << studentDatabase[searchResult].rollNo
                  << ", Name: " << studentDatabase[searchResult].name
                  << ", SGPA: " << studentDatabase[searchResult].sgpa << "\n";
    } else {
        std::cout << "Student with Roll No. " << searchRollNo << " not found.\n";
    }

    return 0;
}




•	Implement Circular Queue using Array. Perform following operations on it. a) Insertion (Enqueue) b) Deletion (Dequeue) c) Display


#include <iostream>
using namespace std;

// Define the maximum size of the circular queue
const int MAX_SIZE = 5;

class CircularQueue {
private:
    int front, rear;
    int queue[MAX_SIZE];

public:
    // Constructor to initialize front and rear
    CircularQueue() : front(-1), rear(-1) {}

    // Function to check if the queue is empty
    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    // Function to check if the queue is full
    bool isFull() {
        return (front == (rear + 1) % MAX_SIZE);
    }

    // Function to insert an element into the circular queue (enqueue)
    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is full. Cannot enqueue.\n";
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % MAX_SIZE;
        }

        queue[rear] = value;
        cout << "Enqueued: " << value << endl;
    }

    // Function to remove an element from the circular queue (dequeue)
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty. Cannot dequeue.\n";
            return;
        }

        cout << "Dequeued: " << queue[front] << endl;

        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % MAX_SIZE;
        }
    }

    // Function to display the elements of the circular queue
    void display() {
        if (isEmpty()) {
            cout << "Queue is empty.\n";
            return;
        }

        cout << "Circular Queue elements: ";
        int i = front;

        do {
            std::cout << queue[i] << " ";
            i = (i + 1) % MAX_SIZE;
        } while (i != (rear + 1) % MAX_SIZE);	

        cout << endl;
    }
};

int main() {
    CircularQueue cq;

    // Example usage
    cq.enqueue(1);
    cq.enqueue(2);
    cq.enqueue(3);
    cq.display();

    cq.dequeue();
    cq.display();

    cq.enqueue(4);
    cq.enqueue(5);
    cq.enqueue(6); // Trying to enqueue when the queue is full
    cq.display();

    return 0;
}
