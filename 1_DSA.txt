PRACTICALS 

•	Consider a student database of SEIT class (at least 15 records). Database contains different fields of every student like Roll No, Name and SGPA.(Array of structure)
a) Design a roll call list, arrange list of students according to roll numbers in ascending order
(Use Bubble Sort)
b) Search students according to SGPA

#include<iostream>
#include<iomanip>

using namespace std;

struct Student{
    int Roll_no;
    string Name;
    float SGPA;
};

void Bubblesort(Student student[], int n){
    for(int i = 0; i < n - 1; i++){
        for (int j = 0; j < i -1; j++){
            if (student[i].Roll_no > student[j].Roll_no){
                swap(student[j], student[j + 1]);
            }

        }
    }
}

void Display(Student student[], int n){
        cout<< setw(10) << "Roll_no" << setw(20) << "Name" << setw(10) << "SGPA" <<endl;
        for(int i = 0; i < n; i++){
            if (student[i].Roll_no != 0){
                cout<< setw(10) << student[i].Roll_no << setw(20)<< student[i].Name << setw(10) << student[i].SGPA <<endl;
            }
    }
}

void SearchSgpa(Student student[], int n, float TragetSgpa){
    bool found = true;

    cout<< "Student with SGAP" << TragetSgpa << ":" <<endl;
    for(int i = 0; i < n; i++){
        if(student[i].SGPA == TragetSgpa){
            cout<< "\nRoll_no:" << student[i].Roll_no << "\nName of Student:" << student[i].Name << "\nSGPA:" << student[i].SGPA <<endl;
            found = true;   
        }
    }

    if(!found){
        cout<< "There is not student With this SGPA";
    }
}

int main(){
    const int maxStudent = 15;
    Student studentDatabase[maxStudent] = {
        {101,"Omkar",8.9},
        {102,"Karan",9.1},
        {103,"Rohit",8.7},
        {104,"Amar",9.1}
    };

    Bubblesort(studentDatabase,maxStudent);
        cout<<"Roll_Call List (Sorted by Roll_no) :";
        Display(studentDatabase,maxStudent);
    

    float TargetSgpa;
    cout<< "Enter SGPA to Search :";
    cin>>TargetSgpa;
    SearchSgpa(studentDatabase,maxStudent,TargetSgpa);

    return 0;
}



•	Implement Heap sort to sort given set of values using max or min heap

#include <iostream>
#include <vector>

using namespace std;

// Function to perform heapify operation
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// Function to build a max heap
void buildHeap(vector<int>& arr) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
}

// Function to perform heap sort
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // Build max heap
    buildHeap(arr);

    // Extract elements one by one from the heap
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);  // Move current root to end
        heapify(arr, i, 0);    // Call heapify on the reduced heap
    }
}

// Function to print an array
void printArray(const vector<int>& arr) {
    for (int i : arr)
        cout << i << " ";
    cout << endl;
}

// Main method
int main() {
    vector<int> values = {12, 11, 13, 5, 6, 7};

    cout << "Original array: ";
    printArray(values);

    heapSort(values);

    cout << "Sorted array: ";
    printArray(values);

    return 0;
}

2.


#include <iostream>
#include <vector>

using namespace std;

// Function to perform heapify operation
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// Function to build a max heap
void buildHeap(vector<int>& arr) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
}

// Function to perform heap sort
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // Build max heap
    buildHeap(arr);

    // Extract elements one by one from the heap
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);  // Move current root to end
        heapify(arr, i, 0);    // Call heapify on the reduced heap
    }
}

// Function to print an array
void printArray(const vector<int>& arr) {
    for (size_t i = 0; i < arr.size(); ++i)
        cout << arr[i] << " ";
    cout << endl;
}

// Main method
int main() {
    vector<int> values;
    values.push_back(12);
    values.push_back(11);
    values.push_back(13);
    values.push_back(5);
    values.push_back(6);
    values.push_back(7);

    cout << "Original array: ";
    printArray(values);

    heapSort(values);

    cout << "Sorted array: ";
    printArray(values);

    return 0;
}

