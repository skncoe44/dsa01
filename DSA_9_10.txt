Implement Stack as an abstract data type using singly linked list and use this ADT for
conversion of infix expression to Prefix and evaluation of prefix expression.

#include <iostream>
#include <ctype.h>
#include <string.h>
#include <math.h>
using namespace std;

class stack {
    struct node {
        float data;
        node *next;
    };
    node *top;

public:
    stack() {
        top = NULL;
    }
    int empty();
    void push(float);
    float pop();
    int Top();
};

int stack::empty() {
    if (top == NULL)
        return 1;
    else
        return 0;
}

void stack::push(float x) {
    node *newnode;
    newnode = new node;
    newnode->data = x;
    newnode->next = top;
    top = newnode;
}

float stack::pop() {
    node *temp = top;
    float x;
    top = top->next;
    x = temp->data;
    delete temp;
    return x;
}

int stack::Top() {
    return top->data;
}

int Priority(char Op) {
    if (Op == '(' || Op == ')')
        return 0;
    if (Op == '+' || Op == '-')
        return 1;
    else if (Op == '*' || Op == '/')
        return 2;
    else if (Op == '^')
        return 3;
    else
        return 4;
}

float Operation(char Op, float A, float B) {
    float P;
    if (Op == '*')
        P = A * B;
    else if (Op == '/')
        P = A / B;
    else if (Op == '+')
        P = A + B;
    else if (Op == '-')
        P = A - B;
    else if (Op == '^')
        P = pow(A, B);
    return P;
}

void infixtopostfix(char infix[20]) {
    char post[20], x, token;
    int i, j = 0;
    stack s;
    for (i = 0; infix[i] != '\0'; i++) {
        token = infix[i];
        if (isalnum(token)) //alphanumeric
            post[j++] = token;
        else if (token == '(')
            s.push(token);
        else if (token == ')')
            while ((x = s.pop()) != '(') //pop till )
                post[j++] = x;
        else {
            while (!s.empty() && Priority(token) <= Priority(s.Top())) {
                post[j++] = s.pop();
            }
            s.push(token);
        }
    }
    while (!s.empty())
        post[j++] = s.pop();
    post[j] = '\0';
    cout << "\nPostfix Expression=>";
    cout << post;
}

void infixtoprefix(char infix[20]) {
    char prefix[20], x, token;
    int i, j = 0;
    stack s;
    for (i = strlen(infix) - 1; i >= 0; i--) {
        token = infix[i];
        if (isalnum(token))
            prefix[j++] = token;
        else if (token == ')')
            s.push(token);
        else if (token == '(')
            while ((x = s.pop()) != ')')
                prefix[j++] = x;
        else {
            while (!s.empty() && Priority(token) < Priority(s.Top())) {
                prefix[j++] = s.pop();
            }
            s.push(token);
        }
    }
    while (!s.empty())
        prefix[j++] = s.pop();
    prefix[j] = '\0';
    cout << "\nPrefix Expression=>";
    for (i = strlen(prefix) - 1; i >= 0; i--)
        cout << prefix[i];
}

float Prefix_Evaluation(char Str[20]) {
    int i;
    float Op1, Op2, Result, val;
    stack S;
    char token;
    for (i = strlen(Str) - 1; i >= 0; i--) {
        token = Str[i];
        if (isalpha(token)) // if char
        {
            cout << "\nEnter the value of " << token << "=>";
            cin >> val;
            S.push(val);
        } else if (isdigit(token))
            S.push(token - 48);
        else {
            Op1 = S.pop();
            Op2 = S.pop();
            Result = Operation(token, Op1, Op2);
            cout << "Result: ";
            S.push(Result);
        }
    }
    return S.pop();
}

int main() {
    int ch;
    char infix[20], postfix[20], prefix[20];
    do {
        cout << "\n\nSELECT THE CHOICE FROM BELOW\n1: Infix to Postfix\n2: Infix to Prefix\n3: Prefix Evaluation\n4: Exit";
        cout << "\nEnter your Choice: ";
        cin >> ch;
        switch (ch) {
            case 1:
                cout << "\nEnter infix Expression=>";
                cin >> infix;
                infixtopostfix(infix);
                break;
            case 2:
                cout << "\nEnter infix Expression=>";
                cin >> infix;
                infixtoprefix(infix);
                break;
            case 3:
                cout << "\nEnter Prefix Expression=>";
                cin >> prefix;
                cout << "\nEvaluated Result=> " << Prefix_Evaluation(prefix);
                break;
            case 4:
                cout << "Exiting the program.\n";
                break;
            default:
                cout << "Invalid choice. Please enter a valid choice.\n";
        }
    } while (ch != 4);
    return 0;
}


*   Represent a graph of your college campus using adjacency list /adjacency matrix. Nodes should
represent the various departments/institutes and links should represent the distance between them.
 Find minimum spanning tree Using Kruskalâ€™s algorithm.


include<iostream>
#include<string.h>
using namespace std;
class Graph
{
char Vnames[10][10];
int cost[10][10],n;
public:
Graph();
void creat_graph();
void display();
int Position(char[]);
void kru();
};
Graph::Graph()
{
n=0;
for(int i=0;i<10;i++)
for(int j=0;j<10;j++)
{
 cost[i][j]=999;
}
}
void Graph::creat_graph()
{
char ans,Start[10],End[10];
int wt,i,j;
cout<<"Enter number of nodes";
cin>>n;
cout<<"\n Enter vertex name:";
for(i=0;i<n;i++)
 cin>>Vnames[i];
do
{
cout<<"\nEnter Start and end point of edge";
cin>>Start>>End;
cout<<"Enter weight";
cin>>wt;
i=Position(Start);
j=Position(End);
cost[i][j]=cost[j][i]=wt;
cout<<"\nMore Edges ";
cin>>ans;
}while(ans=='y' || ans=='Y');
}
void Graph::display()
{
int i,j;
for(i=0;i<n;i++)
{
cout<<"\n";
for(j=0;j<n;j++)
cout<<"\t"<<cost[i][j];
}
}
int Graph::Position(char key[10])
{
for(int i=0;i<n;i++)
if(strcmp(Vnames[i],key)==0)
return i;
return -1;
}
void Graph::kru()
{ int i,j,x,y,Total_cost=0,min,gr=1,flag=0,temp, v[10]={0};
while(flag==0)
{ min=999;
for(i=0;i<n;i++) //find the minimum edge 
{ for(j=0;j<n;j++)
 { if(cost[i][j]<min)
{ min=cost[i][j];
x=i;
y=j;
 }//end of if 
}//end inner for 
}//end of outer for 
if(v[x]==0 && v[y]==0) //both are not visited 
{ v[x]=v[y]=gr;
gr++;
}
else if(v[x]!=0 && v[y]==0)// x visited , y not visited
v[y]=v[x]; //assign group of x to y 
else if(v[x]==0 && v[y]!=0)// x not visited,y visited
v[x]=v[y];//assign group of y to x 
else
{ if(v[x]!=v[y]) // both belong to diffrent group 
{ temp=v[x];
for(i=0;i<n;i++)
{ if(v[i]==temp)
v[i]=v[y];
}//end of for 
}//end of if 
}//end of else 
cost[x][y]=cost[y][x]=999;
Total_cost = Total_cost + min;
cout<<"\n"<<Vnames[x]<<"\t"<<Vnames[y]<<"\t"<<min;
//print visit array after every step
 temp=v[0]; flag=1;
 for(i=0;i<n;i++)
 { if(temp!=v[i])
 { flag=0;
break;
 }
 }//end of inner for 
}//end of while 
cout<<"\nTotal cost of tree="<<Total_cost;
}
int main()
{
Graph ob;
ob.creat_graph();
ob.display();
ob.kru();
}